generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "linux-musl"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum SubmissionStatus {
    Queued
    Executing
    Executed
    TimeLimitExceeded
}

enum Difficulty {
    Easy
    Medium
    Hard
}

enum AuthProvider {
    EMAIL
    GITHUB
}

model User {
    id                String       @id @default(cuid())
    email             String       @unique
    name              String?
    password          String?
    authProvider      AuthProvider @default(EMAIL)
    githubAccessToken String?
    isVerified        Boolean      @default(false)
    points            Int          @default(0)
    imageUrl          String?
    submissions       Submission[]
    admin             Boolean      @default(false)
    editorials        Editorial[]
    createdAt         DateTime     @default(now())
    updatedAt         DateTime     @updatedAt
    passwordUpdatedAt DateTime     @default(now())
}

model Submission {
    id                 String           @id @default(cuid())
    User               User             @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId             String
    time               DateTime         @default(now())
    success            Boolean?
    code               String
    language           String
    output             String?
    status             SubmissionStatus @default(Queued)
    problemStatement   ProblemStatement @relation(fields: [problemStatementId], references: [id], onDelete: Cascade)
    problemStatementId String
    execTime           Int?
}

model ProblemStatement {
    id          String       @id @default(cuid())
    title       String
    description String
    difficulty  Difficulty
    submissions Submission[]
    testCase    Testcase[]
    editorials  Editorial[]
    tagId       String?
}

model Testcase {
    id                 String           @id @default(cuid())
    input              String
    output             String
    hidden             Boolean          @default(true)
    problemStatement   ProblemStatement @relation(fields: [problemStatementId], references: [id], onDelete: Cascade)
    problemStatementId String
}

model Editorial {
    id                 String           @id @default(cuid())
    title              String
    content            String
    problemStatement   ProblemStatement @relation(fields: [problemStatementId], references: [id], onDelete: Cascade)
    problemStatementId String
    user               User             @relation(fields: [userId], references: [id])
    userId             String
    hidden             Boolean          @default(false)
    createdAt          DateTime         @default(now())
    updatedAt          DateTime         @updatedAt
}
