generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "linux-musl"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum SubmissionStatus {
    Queued
    Executing
    Executed
    TimeLimitExceeded
}

enum Difficulty {
    Easy
    Medium
    Hard
}

enum AuthProvider {
    EMAIL
    GITHUB
}

model User {
    id                String             @id @default(cuid())
    email             String             @unique
    name              String?
    password          String?
    authProvider      AuthProvider       @default(EMAIL)
    githubAccessToken String?
    isVerified        Boolean            @default(false)
    points            Int                @default(0)
    imageUrl          String?
    submissions       Submission[]
    admin             Boolean            @default(false)
    editorials        Editorial[]
    createdAt         DateTime           @default(now())
    updatedAt         DateTime           @updatedAt
    passwordUpdatedAt DateTime           @default(now())
    ProblemStatement  ProblemStatement[]
}

model Submission {
    id                 String           @id @default(cuid())
    userId             String
    time               DateTime         @default(now())
    success            Boolean?
    code               String
    language           String
    status             SubmissionStatus @default(Queued)
    problemStatementId String
    output             String?
    execTime           Int?
    keystrokeTimings   Int[]
    passedTestCases    Int?
    totalTestCases     Int?
    problemStatement   ProblemStatement @relation(fields: [problemStatementId], references: [id], onDelete: Cascade)
    user               User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ProblemStatement {
    id          String        @id @default(cuid())
    title       String
    description String
    createdById String
    createdBy   User          @relation(fields: [createdById], references: [id])
    difficulty  Difficulty
    submissions Submission[]
    testCase    Testcase[]
    editorials  Editorial[]
    tagId       String?
    starterCode StarterCode[]
}

model Testcase {
    id                 String           @id @default(cuid())
    input              String
    output             String
    hidden             Boolean          @default(true)
    problemStatement   ProblemStatement @relation(fields: [problemStatementId], references: [id], onDelete: Cascade)
    problemStatementId String
}

model StarterCode {
    id                 String           @id @default(cuid())
    language           String
    code               String
    problemStatement   ProblemStatement @relation(fields: [problemStatementId], references: [id], onDelete: Cascade)
    problemStatementId String

    @@unique([problemStatementId, language])
}

model Editorial {
    id                 String           @id @default(cuid())
    title              String
    content            String
    problemStatement   ProblemStatement @relation(fields: [problemStatementId], references: [id], onDelete: Cascade)
    problemStatementId String
    user               User             @relation(fields: [userId], references: [id])
    userId             String
    hidden             Boolean          @default(false)
    createdAt          DateTime         @default(now())
    updatedAt          DateTime         @updatedAt
}
